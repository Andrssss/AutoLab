from File_managers import config_manager

class PipelineContext:
    def __init__(self):
        self.image = None            # üì∑ Eredeti k√©p
        self.mask = None             # üß™ Petri dish maszk
        self.settings = {}           # ‚öôÔ∏è √Åltal√°nos be√°ll√≠t√°sok
        self.filtered_image = None   # üßº Sz≈±rt vagy feldolgozott k√©p
        self.analysis = {}           # üî¨ Detekt√°lt kol√≥ni√°k vagy egy√©b eredm√©nyek
        self.roi_points = []         # üìç K√©zzel kiv√°lasztott ROI pontok (x, y)

        # T√∂lts√ºk be a pixel_per_cm-t a settings.yaml f√°jlb√≥l
        self.pixel_per_cm = self._load_pixel_per_cm()

    def _load_pixel_per_cm(self):
        """
        Bet√∂lti az adott kamera pixel_per_cm √©rt√©k√©t, ha van ilyen a settings.yaml-ban.
        """
        try:
            # El≈ësz√∂r lek√©rj√ºk az √°ltal√°nos settings.yaml tartalmat
            full_settings = config_manager.load_settings()
            self.settings = full_settings  # az eg√©sz settings elt√°rol√°sa

            # Lek√©rj√ºk az aktu√°lis kamera indexet (default: 0)
            cam_index = full_settings.get("camera_index", 0)

            # Kamera-specifikus be√°ll√≠t√°sok bet√∂lt√©se
            cam_settings = full_settings.get("camera_settings", {}).get(str(cam_index), {})

            return cam_settings.get("pixel_per_cm", None)

        except Exception as e:
            print(f"[HIBA] Nem siker√ºlt bet√∂lteni a pixel_per_cm √©rt√©ket: {e}")
            return None
